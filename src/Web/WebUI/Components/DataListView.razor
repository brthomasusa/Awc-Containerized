@typeparam TItemType
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="grid-container">
    @if (Items != null && Items.Any())
    {
        foreach(var item in Items)
        {
            <div class="grid-item" style="width: @_columnWidth" @onclick="() => OnItemClicked.InvokeAsync(item)">
                @ItemTemplate!(item)
            </div>
        }  
    }
</div>

@code{
    [Parameter] public List<TItemType>? Items { get; set; }
    [Parameter] public RenderFragment<TItemType>? ItemTemplate { get; set; }
    [Parameter] public EventCallback<TItemType> OnItemClicked { get; set; }
    [Parameter] public int ColumnCount { get; set; } = 4;
    private int _columnWidth => 100 / ColumnCount;
    private DotNetObjectReference<DataListView<TItemType>>? _dotNetObjectReference;

    protected async override Task OnInitializedAsync()
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("triggerOnWindowResized", _dotNetObjectReference);
    }

    public void Dispose()
    {
        _dotNetObjectReference!.Dispose();
    }

    [JSInvokable]
    public void OnWindowResized(int width, int height)
        => Console.WriteLine($"New width {width} and the new height {height}.");
}